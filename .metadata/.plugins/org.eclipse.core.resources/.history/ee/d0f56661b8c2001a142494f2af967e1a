package dictionaries_hashmaps;

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class SherlockAndAnagrams {

    // Complete the sherlockAndAnagrams function below.
    static int sherlockAndAnagrams(String s) {
    	class Hashtable{
    		LinkedList[] data;
    		public Hashtable(int length) {
    			data = new LinkedList[length*2];
    		}

    		void put(String key) {
    			int hashcode = this.hashFunction(key);
    			int index = convertoToIndex(hashcode);
    			if (data[index] == null) {
    				data[index] = new LinkedList<Integer>();
    			}
    			LinkedList list = data[index];
    			list.add(key);
    		}
    		
    		int hashFunction(String key) {
    			int hash = 0;
    			for(int i = 0; i < key.length(); i++) {
    				hash = hash + key.charAt(i);
    			}
    			return hash;
    		}
    		
    		private int convertoToIndex(int hashcode) {
    			return Math.abs(hashcode%this.data.length);
    		}

			public int numberOfAnagrams(String substring) {
				int hashcode = this.hashFunction(substring);
    			int index = convertoToIndex(hashcode);
    			if(data[index].contains(substring)) {
    				int anagrams = data[index].size();
    				data[index]= null;
    				return anagrams;
    			}else {
    				return 0;
    			}
			}
    		
    	}
    	
    	Hashtable substrings = new Hashtable(s.length());
    	for(int i = 0; i < s.length(); i++) {
    		for(int j = i; j < s.length(); j++) {
    			System.out.println(s.substring(i, j));
    			substrings.put(s.substring(i, j));
    		}
    	}
    	int anagrams = 0;
    	for(int i = 0; i < s.length(); i++) {
    		for(int j = i; j < s.length(); j++) {
    			anagrams = anagrams + substrings.numberOfAnagrams(s.substring(i, j));
    			}
    		}
    
    	
    	
    	
    	return anagrams;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = sherlockAndAnagrams(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
